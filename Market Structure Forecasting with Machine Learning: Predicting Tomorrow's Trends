import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error

# Generate synthetic market data
np.random.seed(42)
dates = pd.date_range(start='2020-01-01', periods=100, freq='D')
open_prices = np.linspace(100, 200, 100) + np.random.normal(0, 5, 100)
high_prices = open_prices + np.random.normal(0, 10, 100)
low_prices = open_prices - np.random.normal(0, 10, 100)
close_prices = open_prices + np.random.normal(0, 5, 100)
volumes = np.random.randint(1000, 5000, 100)

data = pd.DataFrame({
    'Date': dates,
    'Open': open_prices,
    'High': high_prices,
    'Low': low_prices,
    'Close': close_prices,
    'Volume': volumes
})

# Select relevant features and target variable
features = data[['Open', 'High', 'Low', 'Volume']]
target = data['Close']

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)

# Train the linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Predict future market trends
future_open = np.linspace(200, 300, 10) + np.random.normal(0, 5, 10)
future_high = future_open + np.random.normal(0, 10, 10)
future_low = future_open - np.random.normal(0, 10, 10)
future_volume = np.random.randint(1000, 5000, 10)

future_data = pd.DataFrame({
    'Open': future_open,
    'High': future_high,
    'Low': future_low,
    'Volume': future_volume
})

predictions = model.predict(future_data)

# Evaluate the model
y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error: {mse}')

# Plotting the results
plt.figure(figsize=(10, 6))
plt.plot(dates, data['Close'], 'bo-', label='Historical Close Prices')
plt.plot(pd.date_range(start='2020-04-10', periods=10, freq='D'), predictions, 'ro--', label='Predicted Close Prices')
plt.xlabel('Date')
plt.ylabel('Close Price')
plt.title('Market Structure Forecasting with Machine Learning')
plt.legend()
plt.grid(True)
plt.show()
